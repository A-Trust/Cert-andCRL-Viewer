#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4cvs on Wed Aug 03 10:35:06 2005
import datetime
import time
import ldap
import os
import urllib2
import socket
import wx

TIMEOUT = 20

def http2file(link,name='temp.crl'):


    index = link.find("&")

    post = link[index+1:]
    link = link[:index+1]

    socket.setdefaulttimeout(TIMEOUT)
    try:
        f = urllib2.urlopen(link,post)
    except:
        return None

    link = link.replace("%20"," ")
    # filename
    filename = "temp/"+ name

    # ?erprfen ob Verzeichnis existieren
    if os.path.exists("temp")==False:
        os.mkdir("temp")

    # write to file
    file_object = open( filename, "wb")
    for x in f.readlines():
        file_object.write(x)
    file_object.close()
    return filename



def ldap2file(link,Attribut='certificaterevocationlist'):
    # LDAP link= ldap://ldap.a-trust.at/ou=a-sign-corporate-light-01,o=A-Trust,c=AT?certificaterevocationlist?
    # ldap://ldap.a-trust.at/ou=a-sign-corporate-medium-02,o=A-Trust,c=AT?certificaterevocationlist?base?objectclass=eidCertificationAuthority

    link = link.replace("%20"," ")
    #print link
    t = link.split('?')
    index = t[0].rfind('/')
    server = t[0][:index]
    index2 = server.find('//')
    server = server[index2+2:]
    baseDN = t[0][index+1:len(t[0])]
    try:
        retrieveAttributes = [t[1],]
    except:
        retrieveAttributes = [Attribut,]

    t = baseDN.split(',')
    searchFilter = t[0]

    socket.setdefaulttimeout(TIMEOUT)


    try:
        l = ldap.open(server)
        l.set_option(ldap.OPT_TIMEOUT,TIMEOUT)
        l.set_option(ldap.OPT_NETWORK_TIMEOUT,TIMEOUT)
        l.protocol_version = ldap.VERSION3
        l.simple_bind("", "")

        ldap_result_id = l.search(baseDN, ldap.SCOPE_SUBTREE, searchFilter, retrieveAttributes)

        # Darf nur einen Eintrag Finden
        result_type, result_data = l.result(ldap_result_id, 0)

        #print
        #print "result_data: ",result_data
        key = result_data[0][1].keys()
        #print key
        result_data = result_data[0][1][ key[0] ] [0]  # Attribut aus dem result_data auslesen

    except ldap.LDAPError, e:
        print e
        return None
    except:
        return None

    # filename
    searchFilter = searchFilter.split('=')
    filename = "temp/" + searchFilter[1]+".crl"


    # ?erprfen ob Verzeichnis existieren
    if os.path.exists("temp")==False:
        os.mkdir("temp")
    # write to file
    file_object = open( filename, "wb")
    file_object.write(result_data)
    file_object.close()

    return filename


def IsDayLightSaving(time2test):

    if 0 == time.daylight:
        return False

    Winter2Sommer = datetime.datetime.today()
    Sommer2Winter = datetime.datetime.today()
    #    Umstellung von Winterzeit auf Sommerzeit:
    #    Am letzten Sonntagmorgen im M?z werden die Uhren von 02:00 auf 03:00 Uhr vorgestellt.
    #    Man verliert eine Stunde.
    temp = datetime.datetime(Winter2Sommer.year, 4, 1, 2, 0, 0, 0)
    while 1:
        if 6 == temp.weekday():    # 6=Sonntag
            Winter2Sommer = temp
            break;
        temp = temp-datetime.timedelta(1)
    #    Umstellung von Sommerzeit auf Winterzeit:
    #    Am letzten Sonntagmorgen im Oktober werden die Uhren von 03:00 auf 02:00 Uhr zurckgestellt.
    #    Man gewinnt eine Stunde.
    #    Von der bergebenen Zeit aus muss es 2 Uhr sein nicht 3, da KEINE Sommerzeit bergeben wird, sondern Winterzeit!!!
    temp = datetime.datetime(Sommer2Winter.year, 11, 1, 2, 0, 0, 0)
    while 1:
        if 6 == temp.weekday():    # 6=Sonntag
            Sommer2Winter = temp
            break;
        temp = temp-datetime.timedelta(1)

    #print 'Winter2Sommer: '+Winter2Sommer.isoformat()
    #print 'Sommer2Winter: '+Sommer2Winter.isoformat()

    #   Ist bergebene Zeit zwischen Winter2Sommer und Sommer2Winter Zeit????
    if time2test >= Winter2Sommer and time2test <= Sommer2Winter:
        return True
    else:
        return False


def UTC2LocalTime(t1):
    t1=t1._parse()
    t1 = time.localtime(t1)
    date = datetime.datetime(t1[0],t1[1],t1[2],t1[3],t1[4],t1[5])

    if True == IsDayLightSaving(date):
        # class timedelta( [days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])
        date = date+datetime.timedelta(hours=1)
    return date.strftime("%c")

def UTC2GMT(t1):
    t1=t1._parse()
    t1 = time.gmtime(t1)
    return time.strftime("%c",t1)

def UTC2LocalTime_DTOBJ(t1):
    t1=t1._parse()
    t1 = time.localtime(t1)
    date = datetime.datetime(t1[0],t1[1],t1[2],t1[3],t1[4],t1[5])

    if True == IsDayLightSaving(date):
        # class timedelta( [days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])
        date = date+datetime.timedelta(hours=1)
    return date

def Str2Unicode(s):
    import sys
    if s[:4]=="Hirs":
        #s=unicode(s,'utf-8')
        s=unicode(s,'utf-8')
        print s
        return s

    try:
        if type(s)==unicode:
            s=s.encode('utf-8')
            return s
    except:
        pass

    try:
        if type(s)==unicode:
            s=s.encode('iso-8859-1')
            return s
    except:
        pass

    try:
        return unicode(s,'utf-8').encode('utf-8')
    except UnicodeDecodeError:
        pass
    except TypeError:
        pass
    try:
        s=unicode(s,'utf-8')
        return s
    except UnicodeDecodeError:
        pass
    except TypeError:
        pass
    try:
        s=unicode(s,'iso-8859-1')
        s=s.replace('\0','')
        return s
    except:
        pass
    return s

def bin2hex(bin):
    s=""
    i=0
    for c in bin:
        s1=hex(ord(c))[2:]
        if len(s1)==1:
            s1="0"+s1
        s+=s1+" "
        i+=1
        if i==16:
            s+='\n'
            i=0
    return s
